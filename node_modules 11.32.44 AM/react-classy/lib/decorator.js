/**
 *
 * Classy - Decorator
 *
 * @module lib/decorator
 * @description
 *   Reassigns component lifecycle methods and creates a component state object
 */

'use strict';

var _Symbol = require('babel-runtime/core-js/symbol')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = Classy;

var _state = require('./state');

var State = _interopRequireWildcard(_state);

var _class = require('./class');

var Class = _interopRequireWildcard(_class);

var _dom = require('./dom');

var DOM = _interopRequireWildcard(_dom);

/**
 *
 * ReactComponent class decorator
 *
 * - Decorator usage:
 *   @Classy([settings])
 *
 * - Functional usage:
 *   Classy(Component [, settings])
 *
 * @param  {ReactComponent} Component - Component to be decorated
 * @param  {Object}         settings  - Settings object -- See State.createComponentState(...)
 * @return {ReactComponent}           - Decorated component
 * @example
 *
 *   // ES2016
 *   @Classy
 *   export default class MyComponent extends React.Component { ... }
 *
 *   // ES2015
 *   class MyComponent extends React.Component { ... }
 *   export default Classy(MyComponent);
 *
 *	 // ES5
 *	 var MyComponent = React.createClass({ ... });
 *	 module.exports = Classy(MyComponent);
 *
 */

function Classy(Component, settings) {
  // Component is a settings object
  if (typeof Component === 'object') {
    return function (realComponent) {
      return Classy(realComponent, Component);
    };
  }
  // Component is a class
  else if (Component.prototype && Component === Component.prototype.constructor) {
      // Create state object
      var state = State.createComponentState(Component, settings);
      var alias = state.settings.alias;

      // Create a static prop for caching instances
      var symbol = _Symbol(alias);
      Component[symbol] = [];
      // Update state
      State.mergeComponentState(alias, {
        // component ref
        Component: Component,
        // instances key
        symbol: symbol
      });
      // Reassign lifecycle methods (mutates Component)
      Class.redefineLifecycleMethods(Component, alias);
    }
    // Component is not a class nor a settings object
    else throw new TypeError('Classy Error: classyDecorate(...)\n' + 'Expected component to be a class (function).\n' + ('-> Got type \'' + typeof Component + '\'.'));
  // All done!
  return Component;
}

module.exports = exports['default'];