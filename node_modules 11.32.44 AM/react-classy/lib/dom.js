/**
 *
 * Classy - DOM Helpers
 *
 * @module lib/DOM
 * @description
 *   Helpers for adding/removing Classy component styles to/from the DOM
 */

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.updateStyle = updateStyle;
exports.removeStyle = removeStyle;

var _state = require('./state');

var State = _interopRequireWildcard(_state);

var _class = require('./class');

var Class = _interopRequireWildcard(_class);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

/**
 *
 * Creates a component's <style> tag and updates its cssText
 *
 * @param  {String}  alias - Component alias
 * @return {Promise}       - Promise to fulfill component cssText
 */

function updateStyle(alias) {
  var state, Component, settings, appendTo, elemId, elemProps, debug, parent, cssText, style, prop;
  return _regeneratorRuntime.async(function updateStyle$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        state = State.getComponentState(alias);

        State.mergeComponentState(alias, { loadingStyles: true });
        Component = state.Component;
        settings = state.settings;
        appendTo = settings.appendTo;
        elemId = settings.elemId;
        elemProps = settings.elemProps;
        debug = settings.debug;
        parent = document.querySelector(appendTo);

        if (parent) {
          context$1$0.next = 11;
          break;
        }

        throw new ReferenceError();

      case 11:
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(Class.getComponentCSS(alias));

      case 13:
        cssText = context$1$0.sent;
        style = document.getElementById(elemId) || document.createElement('style');

        style.id = style.id || elemId;
        context$1$0.t0 = _regeneratorRuntime.keys(elemProps);

      case 17:
        if ((context$1$0.t1 = context$1$0.t0()).done) {
          context$1$0.next = 24;
          break;
        }

        prop = context$1$0.t1.value;

        if (elemProps.hasOwnProperty(prop)) {
          context$1$0.next = 21;
          break;
        }

        return context$1$0.abrupt('continue', 17);

      case 21:
        style[prop] = elemProps[prop];
        context$1$0.next = 17;
        break;

      case 24:
        style.type = style.type || elemProps;
        style.innerHTML = cssText;
        parent.appendChild(style);
        // Update component state
        State.mergeComponentState(alias, {
          isStyled: true,
          cssText: cssText,
          loadingStyles: false
        });
        // Re-render component instances
        State.getComponentInstances(alias).forEach(function (c) {
          return c.forceUpdate();
        });
        // Handle subscriptions
        _utils2['default'].publish(alias, 'updateStyle');
        // Debug
        if (debug) console.debug('Classy Debug: updateStyle(...)\n', alias + ' cssText:\n    ', cssText);
        return context$1$0.abrupt('return', cssText);

      case 32:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 *
 * Removes a component's <style> tag
 *
 * @param  {String}  alias - Component alias
 * @return {Promise}
 */

function removeStyle(alias) {
  var state, settings, debug, elemId, style;
  return _regeneratorRuntime.async(function removeStyle$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        state = State.getComponentState(alias);
        settings = state.settings;
        debug = settings.debug;
        elemId = settings.elemId;
        style = document.getElementById(elemId);

        if (style) {
          context$1$0.next = 7;
          break;
        }

        return context$1$0.abrupt('return', console.warn());

      case 7:
        // <style id={elemId}> could not be selected
        // ...

        if (style.remove) style.remove();else style.parentElement.removeChild(style);
        State.mergeComponentState(alias, {
          isStyled: false,
          cssText: undefined
        });
        // Handle subscriptions
        _utils2['default'].publish(alias, 'removeStyle');
        // Debug
        if (debug) console.debug('Classy Debug: removeStyle(...)\n', alias + ' styles were removed');

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

// Can't find parent node

// appendTo element could not be selected
// ...

// Create <style>