/**
 *
 * Classy - State Helpers
 *
 * @module lib/state
 * @description
 *   Helpers for interfacing with Classy's state object
 */

'use strict';

var _extends = require('babel-runtime/helpers/extends')['default'];

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.createComponentState = createComponentState;
exports.nullifyComponentState = nullifyComponentState;
exports.getComponentState = getComponentState;
exports.setComponentState = setComponentState;
exports.mergeComponentState = mergeComponentState;
exports.decrProp = decrProp;
exports.incrProp = incrProp;
exports.cacheComponentInstance = cacheComponentInstance;
exports.clearComponentInstance = clearComponentInstance;
exports.getComponentInstances = getComponentInstances;
exports.setComponentInstances = setComponentInstances;
exports.resetAllInternalStates = resetAllInternalStates;
exports.resetInternalState = resetInternalState;

var _utils = require('./utils');

var Utils = _interopRequireWildcard(_utils);

/**
 *
 * Tracks the states of all Classy components
 * @type {Object}
 *
 */
var STATE = {};

/**
 *
 * The internal state prop defaults --
 * These are props that should only be manipulated
 * internally or through the use of `Utils` module methods.
 * Other state props (Component, subscriptions, and settings)
 * are not considered 'internal'.
 * @type {Object}
 *
 */
var INTERNAL_STATE_DEFAULTS = {
  isStyled: false,
  currentTheme: undefined,
  previousTheme: undefined,
  loadingStyles: false,
  cssText: undefined
};

/**
 *
 * Creates a Classy component state object
 *
 * @param  {ReactComponent} Component                          - A ReactComponent
 * @param  {Object}         settings                           - Settings object with the following options:
 * @param  {Boolean}        debug=false                        - Logs rendered cssText to debug console whens component styles are updated
 * @param  {Boolean}        hot=false                          - Applies two effects:
 *                                                               - Replace Component ref in state object when redecorated
 *                                                               - Always update styles when mounting an instance
 * @param  {String}         styleProp=style                    - Component prop to access for getting styles
 * @param  {String}         themeProp=theme                    - Component prop to access for getting themes
 * @param  {String}         alias=Component.name               - Key under which component state will be cached
 * @param  {String}         elemId=${alias}_${Utils.genHash()} - ID prop for component <style> tag
 * @param  {Object}         elemProps={ type: 'text/css' }     - Other props to apply to component <style> tag
 * @param  {String}         appendTo=head                      - Element to append component <style> tag to
 * @return {Object}                                            - Component state object
 */

function createComponentState(Component) {
  var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var _ref$debug = _ref.debug;
  var debug = _ref$debug === undefined ? false : _ref$debug;
  var _ref$hot = _ref.hot;
  var hot = _ref$hot === undefined ? false : _ref$hot;
  var _ref$styleProp = _ref.styleProp;
  var styleProp = _ref$styleProp === undefined ? 'style' : _ref$styleProp;
  var _ref$themeProp = _ref.themeProp;
  var themeProp = _ref$themeProp === undefined ? 'theme' : _ref$themeProp;
  var _ref$alias = _ref.alias;
  var alias = _ref$alias === undefined ? Component.name : _ref$alias;
  var _ref$elemId = _ref.elemId;
  var elemId = _ref$elemId === undefined ? alias + '_' + Utils.genHash() : _ref$elemId;
  var _ref$elemProps = _ref.elemProps;
  var elemProps = _ref$elemProps === undefined ? { type: 'text/css' } : _ref$elemProps;
  var _ref$appendTo = _ref.appendTo;
  var appendTo = _ref$appendTo === undefined ? 'head' : _ref$appendTo;

  if (!alias) throw new ReferenceError('Classy Error: createComponentState(...)\n' + 'Component must be named or component\'s settings must specify an \'alias\'.');
  var state = getComponentState(alias);
  // Already has state
  if (state && !hot) {
    console.warn('Classy Warning: createComponentState(...)\n' + ('State has already been created for component ' + alias + '.'));
  }
  // Construct initial state
  else {
      setComponentState(alias, _extends({
        Component: Component,
        settings: {
          debug: debug,
          hot: hot,
          styleProp: styleProp,
          themeProp: themeProp,
          alias: alias,
          elemId: elemId,
          elemProps: elemProps,
          appendTo: appendTo
        },
        subscriptions: {}
      }, INTERNAL_STATE_DEFAULTS));
      if (debug) console.debug('Classy Debug: createComponentState(...)\n', alias + '\n', getComponentState(alias));
    }
  return getComponentState(alias);
}

/**
 *
 * Assigns component state to `null`
 *
 * @param {String} alias - Component alias
 */

function nullifyComponentState(alias) {
  STATE[alias] = null;
}

/**
 *
 * Gets a component's classy state object
 *
 * @param  {String} alias - Component alias
 * @return {Object}       - Copy of state object
 */

function getComponentState(alias) {
  var state = STATE[alias];
  return state ? _extends({}, state) : undefined;
}

/**
 *
 * Sets a component's classy state object
 *
 * @param {String} alias - Component alias
 * @param {Object} state - State object
 */

function setComponentState(alias, state) {
  STATE[alias] = state;
}

/**
 *
 * Shallow merges object into component state
 *
 * @param {String} alias  - Component alias
 * @param {Object} state  - Object to be merged into state
 */

function mergeComponentState(alias, state) {
  STATE[alias] = _extends({}, STATE[alias], state);
}

/**
 *
 * Decrements a component state object prop
 *
 * @param {String} alias - Component alias
 * @param {String} key   - Key of prop to be decremented
 * @param {Number} num   - Amount to decrement
 */

function decrProp(alias, key) {
  var num = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];

  var _getComponentState = getComponentState(alias);

  var val = _getComponentState[key];

  val -= num;
  mergeComponentState(alias, _defineProperty({}, key, val));
}

/**
 *
 * Increments a component state object prop
 *
 * @param {String} alias - Component alias
 * @param {String} key   - Key of prop to be incremented
 * @param {Number} num   - Amount to increment
 */

function incrProp(alias, key) {
  var num = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];

  var _getComponentState2 = getComponentState(alias);

  var val = _getComponentState2[key];

  val += num;
  mergeComponentState(alias, _defineProperty({}, key, val));
}

/**
 *
 * Adds component instance to the list of cached instances
 *
 * @param  {String} alias            - Component alias
 * @param  {ReactComponent} instance - Instance of ReactComponent
 * @return {Number}                  - Number of cached instances
 */

function cacheComponentInstance(alias, instance) {
  var cached = false;
  var instances = getComponentInstances(alias);
  instances.forEach(function (c) {
    return c === instance ? cached = true : null;
  });
  if (!cached) {
    instances.push(instance);
    setComponentInstances(alias, instances);
  }
  return getComponentInstances(alias).length;
}

/**
 *
 * Removes component instance from the list of cached instances
 *
 * @param  {String} alias            - Component alias
 * @param  {ReactComponent} instance - Instance of ReactComponent
 * @return {Number}                  - Number of cached instances
 */

function clearComponentInstance(alias, instance) {
  var index = undefined;
  var instances = getComponentInstances(alias);
  instances.forEach(function (c, i) {
    return c === instance ? index = i : null;
  });
  if (index !== undefined) {
    instances.splice(index, 1);
    setComponentInstances(alias, instances);
  }
  return getComponentInstances(alias).length;
}

/**
 *
 * Gets the list of cached component instances
 *
 * @param  {String} alias - Component alias
 * @return {Array}        - Component instances
 */

function getComponentInstances(alias) {
  var _getComponentState3 = getComponentState(alias);

  var symbol = _getComponentState3.symbol;
  var Component = _getComponentState3.Component;

  return Component[symbol].slice();
}

/**
 *
 * Sets the list of cached component instances
 *
 * @param {String} alias     - Component alias
 * @param {Array}  instances - Component instances
 */

function setComponentInstances(alias, instances) {
  var _getComponentState4 = getComponentState(alias);

  var symbol = _getComponentState4.symbol;
  var Component = _getComponentState4.Component;

  STATE[alias].Component[symbol] = instances;
}

/**
 *
 * Resets the internal state props for all components
 *
 */

function resetAllInternalStates() {
  var hasProp = ({}).hasOwnProperty.bind(STATE);
  for (var alias in STATE) {
    if (hasProp(alias)) resetInternalState(alias);
  }
}

/**
 *
 * Reset a component's internal state props
 *
 * @param {String} alias - Component alias
 */

function resetInternalState(alias) {
  mergeComponentState(alias, INTERNAL_STATE_DEFAULTS);
}