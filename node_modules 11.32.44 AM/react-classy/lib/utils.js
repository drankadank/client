/**
 *
 * Classy - Utils
 *
 * @module utils
 * @description
 *   Public and private utility methods
 */

'use strict';

var _defineProperty = require('babel-runtime/helpers/define-property')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _state = require('./state');

var State = _interopRequireWildcard(_state);

var _dom = require('./dom');

var DOM = _interopRequireWildcard(_dom);

/**
 *
 * Classy public utility methods
 *
 * @type {Object}
 */
exports['default'] = {
  setTheme: setTheme,
  getTheme: getTheme,
  updateStyle: updateStyle,
  removeStyle: removeStyle,
  getComponentState: getComponentState,
  createComponentState: createComponentState,
  resetAllInternalStates: resetAllInternalStates,
  // private methods
  // @todo: remove from default exports
  genHash: genHash,
  subscribe: subscribe,
  unsubscribe: unsubscribe,
  publish: publish
};

/**
 *
 * Updates component styles with specified theme object
 *
 * @param  {String}  alias       - Classy component alias
 * @param  {String}  theme       - Classy component theme name
 * @param  {Boolean} force=false - Re-render theme if already applied
 * @return {Promise}
 */
function setTheme(alias, theme) {
  var force = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];
  var state, isStyled, currentTheme, cssText;
  return _regeneratorRuntime.async(function setTheme$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        state = State.getComponentState(alias);
        isStyled = state.isStyled;
        currentTheme = state.currentTheme;
        cssText = state.cssText;

        if (!(!force && isStyled && theme === currentTheme)) {
          context$1$0.next = 6;
          break;
        }

        return context$1$0.abrupt('return', cssText);

      case 6:
        State.mergeComponentState(alias, { currentTheme: theme });
        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(DOM.updateStyle(alias));

      case 9:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 *
 * Convenience method for State.getComponentState(...).currentTheme
 *
 * @return {String} - Name of the currently applied theme
 */
function getTheme() {
  return State.getComponentState.apply(State, arguments).currentTheme;
}

/**
 *
 * Curries async DOM.updateStyle(...)
 *
 */
function updateStyle() {
  var args$1$0 = arguments;
  return _regeneratorRuntime.async(function updateStyle$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(DOM.updateStyle.apply(DOM, args$1$0));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 *
 * Curries async DOM.removeStyle(...)
 *
 */
function removeStyle() {
  var args$1$0 = arguments;
  return _regeneratorRuntime.async(function removeStyle$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(DOM.removeStyle.apply(DOM, args$1$0));

      case 2:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/**
 *
 * Curries State.getComponentState(...)
 *
 */
function getComponentState() {
  return State.getComponentState.apply(State, arguments);
}

/**
 *
 * Manually initalize your component with Classy
 *
 */
function createComponentState() {
  return State.createComponentState.apply(State, arguments);
}

/**
 *
 * Resets the internal state props for a component
 * Curries State.resetInternalState(...)
 *
 */
function resetInternalState() {
  return State.resetInternalState.apply(State, arguments);
}

/**
 *
 * Basically, resets Classy
 * Curries State.resetAllInternalStates(...)
 *
 */
function resetAllInternalStates() {
  return State.resetAllInternalStates.apply(State, arguments);
}

/**
 *
 * Generates a simple hash with low prob of collision
 *
 * @param  {Number} len=5 - Length of hash to be generated
 * @return {String}       - A five char hash
 */
function genHash() {
  var len = arguments.length <= 0 || arguments[0] === undefined ? 5 : arguments[0];

  var hash = (+new Date() * Math.random()).toString(36).substring(0, len).replace('.', '');
  while (hash.length !== len) {
    if (hash.length > len) hash = hash.substr(0, len);
    if (hash.length < len) hash += genHash(len - hash.length);
  }
  return hash;
}

// @todo: move functions below into an 'events' module

/**
 *
 * Calls handler attached to an event
 *
 * @param  {String} alias - Classy component alias
 * @param  {String} event - The event handler to call
 * @param  {Object} more  - Any number of additional args to pass to handler
 */
function publish(alias, event) {
  var state = State.getComponentState(alias);
  var subscriptions = state.subscriptions;

  for (var _len = arguments.length, more = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    more[_key - 2] = arguments[_key];
  }

  if (subscriptions[event]) subscriptions[event].apply(subscriptions, [state].concat(more));
}

/**
 *
 * Attaches a handler to an event
 *
 * @param  {String}   alias   - Classy component alias
 * @param  {String}   event   - The event to assign handler to
 * @param  {Function} handler - The event handler
 */
function subscribe(alias, event, handler) {
  State.mergeComponentState(alias, {
    subscriptions: _defineProperty({}, event, handler)
  });
}

/**
 *
 * Detaches a handler from an event
 *
 * @param  {String} alias - Classy component alias
 * @param  {String} event - The event to unassign handler from
 */
function unsubscribe(alias, event) {
  State.mergeComponentState(alias, {
    subscriptions: _defineProperty({}, event, null)
  });
}
module.exports = exports['default'];

// Component is already styled with specified theme